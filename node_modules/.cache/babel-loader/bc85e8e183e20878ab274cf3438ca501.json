{"ast":null,"code":"const base_url = 'http://localhost:3004/users';\n\nasync function getAllUser() {\n  // Get all users\n  const response = await fetch(base_url);\n  return await response.json();\n}\n\nasync function getUser(id) {\n  // Get a user\n  const response = await fetch(`${base_url}/${id}`);\n  return await response.json();\n}\n\nasync function createUser(user) {\n  // create a new user\n  const createUser = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  const response = await fetch(`${base_url}`, createUser);\n  return await response.json();\n}\n\nasync function updateUser(user) {\n  // update a existing user\n  // [TODO] remove this return to use a fetch API\n  return {\n    id: 1,\n    name: \"Leanne Graham\",\n    username: \"Bret\",\n    email: \"Sincere@april.biz\",\n    address: {\n      street: \"Kulas Light\",\n      suite: \"Apt. 556\",\n      city: \"Gwenborough\",\n      zipcode: \"92998-3874\"\n    },\n    phone: \"1-770-736-8031 x56442\",\n    company: {\n      name: \"Romaguera-Crona\"\n    }\n  };\n}\n\nexport { getAllUser, getUser, createUser, updateUser };","map":{"version":3,"sources":["C:/Users/bamel/Documents/WSF/React/React-workshop/src/api/user.ts"],"names":["base_url","getAllUser","response","fetch","json","getUser","id","createUser","user","method","headers","body","JSON","stringify","updateUser","name","username","email","address","street","suite","city","zipcode","phone","company"],"mappings":"AAGA,MAAMA,QAAQ,GAAG,6BAAjB;;AAEA,eAAeC,UAAf,GAAkD;AAC9C;AACA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,QAAD,CAA5B;AACA,SAAO,MAAME,QAAQ,CAACE,IAAT,EAAb;AACH;;AAED,eAAeC,OAAf,CAAuBC,EAAvB,EAAsD;AAClD;AACA,QAAMJ,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,QAAS,IAAGM,EAAG,EAAnB,CAA5B;AACA,SAAO,MAAMJ,QAAQ,CAACE,IAAT,EAAb;AACH;;AAED,eAAeG,UAAf,CAA0BC,IAA1B,EAAmE;AAC/D;AACA,QAAMD,UAAU,GAAG;AACfE,IAAAA,MAAM,EAAE,MADO;AAEfC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFM;AAGfC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,IAAf;AAHS,GAAnB;AAKA,QAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,QAAS,EAAb,EAAgBO,UAAhB,CAA5B;AACA,SAAO,MAAML,QAAQ,CAACE,IAAT,EAAb;AACH;;AAED,eAAeU,UAAf,CAA0BN,IAA1B,EAAqD;AACjD;AACA;AACA,SAAO;AACLF,IAAAA,EAAE,EAAE,CADC;AAELS,IAAAA,IAAI,EAAE,eAFD;AAGLC,IAAAA,QAAQ,EAAE,MAHL;AAILC,IAAAA,KAAK,EAAE,mBAJF;AAKLC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,aADD;AAEPC,MAAAA,KAAK,EAAE,UAFA;AAGPC,MAAAA,IAAI,EAAE,aAHC;AAIPC,MAAAA,OAAO,EAAE;AAJF,KALJ;AAWLC,IAAAA,KAAK,EAAE,uBAXF;AAYLC,IAAAA,OAAO,EAAE;AACPT,MAAAA,IAAI,EAAE;AADC;AAZJ,GAAP;AAgBH;;AAED,SAASd,UAAT,EAAqBI,OAArB,EAA8BE,UAA9B,EAA0CO,UAA1C","sourcesContent":["import { User } from './types'\r\nimport UserProfile from '../components/UserProfile'\r\n\r\nconst base_url = 'http://localhost:3004/users'\r\n\r\nasync function getAllUser(): Promise<Array<User>> {\r\n    // Get all users\r\n    const response = await fetch(base_url);\r\n    return await response.json()\r\n}\r\n\r\nasync function getUser(id: User['id']): Promise<User> {\r\n    // Get a user\r\n    const response = await fetch(`${base_url}/${id}`);\r\n    return await response.json();\r\n}\r\n\r\nasync function createUser(user: typeof UserProfile): Promise<User> {\r\n    // create a new user\r\n    const createUser = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(user)\r\n    };\r\n    const response = await fetch(`${base_url}`, createUser);\r\n    return await response.json();\r\n}\r\n\r\nasync function updateUser(user: User): Promise<User> {\r\n    // update a existing user\r\n    // [TODO] remove this return to use a fetch API\r\n    return {\r\n      id: 1,\r\n      name: \"Leanne Graham\",\r\n      username: \"Bret\",\r\n      email: \"Sincere@april.biz\",\r\n      address: {\r\n        street: \"Kulas Light\",\r\n        suite: \"Apt. 556\",\r\n        city: \"Gwenborough\",\r\n        zipcode: \"92998-3874\"\r\n      },\r\n      phone: \"1-770-736-8031 x56442\",\r\n      company: {\r\n        name: \"Romaguera-Crona\"\r\n      }\r\n    }\r\n}\r\n\r\nexport { getAllUser, getUser, createUser, updateUser }\r\n"]},"metadata":{},"sourceType":"module"}