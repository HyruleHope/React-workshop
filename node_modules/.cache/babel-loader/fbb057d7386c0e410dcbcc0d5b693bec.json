{"ast":null,"code":"const base_url = 'http://localhost:3004/posts';\nconst [postResult, setPostResult] = useState(null);\n\nasync function getPost(postID) {\n  // get a unique post\n  const response = await fetch(`${base_url}/${postID}`);\n  return await response.json();\n}\n\nasync function getPosts() {\n  // get all posts\n  const response = await fetch(base_url);\n  return await response.json();\n}\n\nasync function createPost(post) {\n  // create a new post\n  // [TODO] remove this return to use a fetch API\n  // return axios\n  // .post(base_url, post)\n  // .then(res => console.log(res))\n  // .catch(err => console.log(err));\n  const postData = {\n    title: post_title.current.value,\n    description: post_description.current.value\n  };\n\n  try {\n    const response = await fetch(base_url, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\" // \"x-access-token\": \"token-value\",\n\n      },\n      body: JSON.stringify(postData)\n    });\n\n    if (!response.ok) {\n      const message = `An error has occured: ${response.status} - ${response.statusText}`;\n      throw new Error(message);\n    }\n\n    const data = await response.json();\n    const result = {\n      status: response.status + \"-\" + response.statusText,\n      headers: {\n        \"Content-Type\": response.headers.get(\"Content-Type\"),\n        \"Content-Length\": response.headers.get(\"Content-Length\")\n      },\n      data: data\n    };\n    setPostResult(fortmatResponse(result));\n  } catch (err) {\n    setPostResult(err.message);\n  }\n\n  return await response.json(); // return {\n  //     id: 4,\n  //     title: 'title',\n  //     userId: 1,\n  //     body: 'body',\n  //     postImageUrl: 'https://picsum.photos/1280/960',\n  // }\n}\n\nasync function updatePost(post) {\n  // update a existing post\n  // [TODO] remove this return to use a fetch API\n  return {\n    id: 1,\n    title: 'title',\n    userId: 1,\n    body: 'body',\n    postImageUrl: 'https://picsum.photos/1280/960'\n  };\n}\n\nasync function deletePost(postID) {\n  // delete a existing post\n  // [TODO] remove this return to use a fetch API\n  return 1;\n}\n\nexport { getPost, getPosts, deletePost, updatePost, createPost };","map":{"version":3,"sources":["C:/Users/bamel/Documents/WSF/React/React-workshop/src/api/post.ts"],"names":["base_url","postResult","setPostResult","useState","getPost","postID","response","fetch","json","getPosts","createPost","post","postData","title","post_title","current","value","description","post_description","method","headers","body","JSON","stringify","ok","message","status","statusText","Error","data","result","get","fortmatResponse","err","updatePost","id","userId","postImageUrl","deletePost"],"mappings":"AAGA,MAAMA,QAAQ,GAAG,6BAAjB;AAEA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BC,QAAQ,CAAC,IAAD,CAA5C;;AAEA,eAAeC,OAAf,CAAuBC,MAAvB,EAA0D;AACtD;AACA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEP,QAAS,IAAGK,MAAO,EAAvB,CAA5B;AACA,SAAO,MAAMC,QAAQ,CAACE,IAAT,EAAb;AACH;;AAED,eAAeC,QAAf,GAAgD;AAC5C;AACF,QAAMH,QAAQ,GAAG,MAAMC,KAAK,CAACP,QAAD,CAA5B;AACA,SAAO,MAAMM,QAAQ,CAACE,IAAT,EAAb;AACD;;AAED,eAAeE,UAAf,CAA0BC,IAA1B,EAA4D;AACxD;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMC,QAAQ,GAAG;AACfC,IAAAA,KAAK,EAAEC,UAAU,CAACC,OAAX,CAAmBC,KADX;AAEfC,IAAAA,WAAW,EAAEC,gBAAgB,CAACH,OAAjB,CAAyBC;AAFvB,GAAjB;;AAIA,MAAI;AACF,UAAMV,QAAQ,GAAG,MAAMC,KAAK,CAACP,QAAD,EAAW;AACrCmB,MAAAA,MAAM,EAAE,MAD6B;AAErCC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT,CAEP;;AAFO,OAF4B;AAMrCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,QAAf;AAN+B,KAAX,CAA5B;;AAQA,QAAI,CAACN,QAAQ,CAACkB,EAAd,EAAkB;AAChB,YAAMC,OAAO,GAAI,yBAAwBnB,QAAQ,CAACoB,MAAO,MAAKpB,QAAQ,CAACqB,UAAW,EAAlF;AACA,YAAM,IAAIC,KAAJ,CAAUH,OAAV,CAAN;AACD;;AACD,UAAMI,IAAI,GAAG,MAAMvB,QAAQ,CAACE,IAAT,EAAnB;AACA,UAAMsB,MAAM,GAAG;AACbJ,MAAAA,MAAM,EAAEpB,QAAQ,CAACoB,MAAT,GAAkB,GAAlB,GAAwBpB,QAAQ,CAACqB,UAD5B;AAEbP,MAAAA,OAAO,EAAE;AACP,wBAAgBd,QAAQ,CAACc,OAAT,CAAiBW,GAAjB,CAAqB,cAArB,CADT;AAEP,0BAAkBzB,QAAQ,CAACc,OAAT,CAAiBW,GAAjB,CAAqB,gBAArB;AAFX,OAFI;AAMbF,MAAAA,IAAI,EAAEA;AANO,KAAf;AAQA3B,IAAAA,aAAa,CAAC8B,eAAe,CAACF,MAAD,CAAhB,CAAb;AACD,GAvBD,CAuBE,OAAOG,GAAP,EAAY;AACZ/B,IAAAA,aAAa,CAAC+B,GAAG,CAACR,OAAL,CAAb;AACD;;AACD,SAAO,MAAMnB,QAAQ,CAACE,IAAT,EAAb,CAtCwD,CAyCxD;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAED,eAAe0B,UAAf,CAA0BvB,IAA1B,EAAqD;AACjD;AACA;AACA,SAAO;AACHwB,IAAAA,EAAE,EAAE,CADD;AAEHtB,IAAAA,KAAK,EAAE,OAFJ;AAGHuB,IAAAA,MAAM,EAAE,CAHL;AAIHf,IAAAA,IAAI,EAAE,MAJH;AAKHgB,IAAAA,YAAY,EAAE;AALX,GAAP;AAOH;;AAED,eAAeC,UAAf,CAA0BjC,MAA1B,EAAmE;AAC/D;AACA;AACA,SAAO,CAAP;AACH;;AAED,SAASD,OAAT,EAAkBK,QAAlB,EAA4B6B,UAA5B,EAAwCJ,UAAxC,EAAoDxB,UAApD","sourcesContent":["import { Post, PostContent } from './types'\r\nimport axios from 'axios'\r\n\r\nconst base_url = 'http://localhost:3004/posts'\r\n\r\nconst [postResult, setPostResult] = useState(null);\r\n\r\nasync function getPost(postID: Post['id']): Promise<Post> {\r\n    // get a unique post\r\n    const response = await fetch(`${base_url}/${postID}`);\r\n    return await response.json();\r\n}\r\n\r\nasync function getPosts(): Promise<Array<Post>> {\r\n    // get all posts\r\n  const response = await fetch(base_url);\r\n  return await response.json();\r\n}\r\n\r\nasync function createPost(post: PostContent): Promise<Post> {\r\n    // create a new post\r\n    // [TODO] remove this return to use a fetch API\r\n    // return axios\r\n    // .post(base_url, post)\r\n    // .then(res => console.log(res))\r\n    // .catch(err => console.log(err));\r\n\r\n    const postData = {\r\n      title: post_title.current.value,\r\n      description: post_description.current.value,\r\n    };\r\n    try {\r\n      const response = await fetch(base_url, {\r\n        method: \"post\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          // \"x-access-token\": \"token-value\",\r\n        },\r\n        body: JSON.stringify(postData),\r\n      });\r\n      if (!response.ok) {\r\n        const message = `An error has occured: ${response.status} - ${response.statusText}`;\r\n        throw new Error(message);\r\n      }\r\n      const data = await response.json();\r\n      const result = {\r\n        status: response.status + \"-\" + response.statusText,\r\n        headers: {\r\n          \"Content-Type\": response.headers.get(\"Content-Type\"),\r\n          \"Content-Length\": response.headers.get(\"Content-Length\"),\r\n        },\r\n        data: data,\r\n      };\r\n      setPostResult(fortmatResponse(result));\r\n    } catch (err) {\r\n      setPostResult(err.message);\r\n    }\r\n    return await response.json();\r\n\r\n\r\n    // return {\r\n    //     id: 4,\r\n    //     title: 'title',\r\n    //     userId: 1,\r\n    //     body: 'body',\r\n    //     postImageUrl: 'https://picsum.photos/1280/960',\r\n    // }\r\n}\r\n\r\nasync function updatePost(post: Post): Promise<Post> {\r\n    // update a existing post\r\n    // [TODO] remove this return to use a fetch API\r\n    return {\r\n        id: 1,\r\n        title: 'title',\r\n        userId: 1,\r\n        body: 'body',\r\n        postImageUrl: 'https://picsum.photos/1280/960',\r\n    }\r\n}\r\n\r\nasync function deletePost(postID: Post['id']): Promise<Post['id']> {\r\n    // delete a existing post\r\n    // [TODO] remove this return to use a fetch API\r\n    return 1\r\n}\r\n\r\nexport { getPost, getPosts, deletePost, updatePost, createPost }\r\n"]},"metadata":{},"sourceType":"module"}