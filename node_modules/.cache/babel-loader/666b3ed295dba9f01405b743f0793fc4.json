{"ast":null,"code":"const base_url = 'http://localhost:3004/posts';\n\nasync function getPost(postID) {\n  // get a unique post\n  const response = await fetch(`${base_url}/${postID}`);\n  return await response.json();\n}\n\nasync function getPosts() {\n  // get all posts\n  const response = await fetch(base_url);\n  return await response.json();\n}\n\nasync function createPost(post) {\n  // create a new post\n  // [TODO] remove this return to use a fetch API\n  // return axios\n  // .post(base_url, post)\n  // .then(res => console.log(res))\n  // .catch(err => console.log(err));\n  const response = await fetch(base_url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: `${event.target.name.value}`,\n      image: `${event.target.image.value}`,\n      id: `${event.target.image.value}`,\n      title: 'title',\n      userId: 1,\n      body: 'body',\n      postImageUrl: 'https://picsum.photos/1280/960'\n    })\n  }).then(resp => resp.json()).then(renderToys); // return {\n  //     id: 4,\n  //     title: 'title',\n  //     userId: 1,\n  //     body: 'body',\n  //     postImageUrl: 'https://picsum.photos/1280/960',\n  // }\n}\n\nasync function updatePost(post) {\n  // update a existing post\n  // [TODO] remove this return to use a fetch API\n  return {\n    id: 1,\n    title: 'title',\n    userId: 1,\n    body: 'body',\n    postImageUrl: 'https://picsum.photos/1280/960'\n  };\n}\n\nasync function deletePost(postID) {\n  // delete a existing post\n  // [TODO] remove this return to use a fetch API\n  return 1;\n}\n\nexport { getPost, getPosts, deletePost, updatePost, createPost };","map":{"version":3,"sources":["C:/Users/bamel/Documents/WSF/React/React-workshop/src/api/post.ts"],"names":["base_url","getPost","postID","response","fetch","json","getPosts","createPost","post","method","headers","body","JSON","stringify","name","event","target","value","image","id","title","userId","postImageUrl","then","resp","renderToys","updatePost","deletePost"],"mappings":"AAGA,MAAMA,QAAQ,GAAG,6BAAjB;;AAEA,eAAeC,OAAf,CAAuBC,MAAvB,EAA0D;AACtD;AACA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,QAAS,IAAGE,MAAO,EAAvB,CAA5B;AACA,SAAO,MAAMC,QAAQ,CAACE,IAAT,EAAb;AACH;;AAED,eAAeC,QAAf,GAAgD;AAC5C;AACF,QAAMH,QAAQ,GAAG,MAAMC,KAAK,CAACJ,QAAD,CAA5B;AACA,SAAO,MAAMG,QAAQ,CAACE,IAAT,EAAb;AACD;;AAED,eAAeE,UAAf,CAA0BC,IAA1B,EAA4D;AACxD;AACA;AACA;AACA;AACA;AACA;AAEA,QAAML,QAAQ,GAAG,MAAMC,KAAK,CAACJ,QAAD,EAAW;AACvCS,IAAAA,MAAM,EAAE,MAD+B;AAEvCC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAF8B;AAKvCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,MAAAA,IAAI,EAAG,GAAEC,KAAK,CAACC,MAAN,CAAaF,IAAb,CAAkBG,KAAM,EADd;AAEnBC,MAAAA,KAAK,EAAG,GAAEH,KAAK,CAACC,MAAN,CAAaE,KAAb,CAAmBD,KAAM,EAFhB;AAGnBE,MAAAA,EAAE,EAAG,GAAEJ,KAAK,CAACC,MAAN,CAAaE,KAAb,CAAmBD,KAAM,EAHb;AAInBG,MAAAA,KAAK,EAAE,OAJY;AAKnBC,MAAAA,MAAM,EAAE,CALW;AAMnBV,MAAAA,IAAI,EAAE,MANa;AAOnBW,MAAAA,YAAY,EAAE;AAPK,KAAf;AALiC,GAAX,CAAL,CAetBC,IAfsB,CAejBC,IAAI,IAAIA,IAAI,CAACnB,IAAL,EAfS,EAgBtBkB,IAhBsB,CAgBjBE,UAhBiB,CAAvB,CARwD,CA2BxD;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAED,eAAeC,UAAf,CAA0BlB,IAA1B,EAAqD;AACjD;AACA;AACA,SAAO;AACHW,IAAAA,EAAE,EAAE,CADD;AAEHC,IAAAA,KAAK,EAAE,OAFJ;AAGHC,IAAAA,MAAM,EAAE,CAHL;AAIHV,IAAAA,IAAI,EAAE,MAJH;AAKHW,IAAAA,YAAY,EAAE;AALX,GAAP;AAOH;;AAED,eAAeK,UAAf,CAA0BzB,MAA1B,EAAmE;AAC/D;AACA;AACA,SAAO,CAAP;AACH;;AAED,SAASD,OAAT,EAAkBK,QAAlB,EAA4BqB,UAA5B,EAAwCD,UAAxC,EAAoDnB,UAApD","sourcesContent":["import { Post, PostContent } from './types'\r\nimport axios from 'axios'\r\n\r\nconst base_url = 'http://localhost:3004/posts'\r\n\r\nasync function getPost(postID: Post['id']): Promise<Post> {\r\n    // get a unique post\r\n    const response = await fetch(`${base_url}/${postID}`);\r\n    return await response.json();\r\n}\r\n\r\nasync function getPosts(): Promise<Array<Post>> {\r\n    // get all posts\r\n  const response = await fetch(base_url);\r\n  return await response.json();\r\n}\r\n\r\nasync function createPost(post: PostContent): Promise<Post> {\r\n    // create a new post\r\n    // [TODO] remove this return to use a fetch API\r\n    // return axios\r\n    // .post(base_url, post)\r\n    // .then(res => console.log(res))\r\n    // .catch(err => console.log(err));\r\n\r\n    const response = await fetch(base_url, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      name: `${event.target.name.value}`,\r\n      image: `${event.target.image.value}`,\r\n      id: `${event.target.image.value}`,\r\n      title: 'title',\r\n      userId: 1,\r\n      body: 'body',\r\n      postImageUrl: 'https://picsum.photos/1280/960',\r\n    })\r\n  })\r\n    .then(resp => resp.json())\r\n    .then(renderToys)\r\n\r\n\r\n    // return {\r\n    //     id: 4,\r\n    //     title: 'title',\r\n    //     userId: 1,\r\n    //     body: 'body',\r\n    //     postImageUrl: 'https://picsum.photos/1280/960',\r\n    // }\r\n}\r\n\r\nasync function updatePost(post: Post): Promise<Post> {\r\n    // update a existing post\r\n    // [TODO] remove this return to use a fetch API\r\n    return {\r\n        id: 1,\r\n        title: 'title',\r\n        userId: 1,\r\n        body: 'body',\r\n        postImageUrl: 'https://picsum.photos/1280/960',\r\n    }\r\n}\r\n\r\nasync function deletePost(postID: Post['id']): Promise<Post['id']> {\r\n    // delete a existing post\r\n    // [TODO] remove this return to use a fetch API\r\n    return 1\r\n}\r\n\r\nexport { getPost, getPosts, deletePost, updatePost, createPost }\r\n"]},"metadata":{},"sourceType":"module"}